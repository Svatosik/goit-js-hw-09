{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAEH,SAAxBC,EAAcC,EAAUC,GAEK,OAA7B,IAAIC,SAAQ,CAACC,EAASC,KAEsC,MAA3DC,EAAgBC,KAAKC,SAAW,GAC6CC,YAAxE,KACLH,EAE2DF,EAArD,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAuBbL,EAAKa,iBAAiB,UAAUC,IAE9BA,EAAMC,iBACN,MAAMC,EAAaC,OAAOjB,EAAKkB,SAASb,MAAMc,OACxCC,EAAYH,OAAOjB,EAAKkB,SAASG,KAAKF,OACtCG,EAASL,OAAOjB,EAAKkB,SAASI,OAAOH,OAEvCH,EAAa,GAAKI,EAAY,GAAKE,GAAU,EAC/CC,EAAAzB,GAAS0B,OAAOC,QACd,kGA5BN,SAAwBT,EAAYI,EAAWE,GAET,IAA/B,IAAII,EAAI,EAAGA,GAAKJ,EAAQI,GAAK,EAGSvB,EAA3BuB,EADAV,GAAcU,EAAI,GAAKN,GAEuGO,MAApI,EAACvB,SAAEA,EAAQC,MAAEA,MACjBkB,EAAAzB,GAAS0B,OAAOI,QACd,uBAAqBxB,QAAiBC,MAAU,IAGnDwB,OAAM,EAACzB,SAAEA,EAAQC,MAAEA,MAClBkB,EAAAzB,GAAS0B,OAAOM,QACd,sBAAoB1B,QAAiBC,MAAU,G,CAmBvD0B,CAAef,EAAYI,EAAWE,EAAO","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix'; // імпортується бібліотека сповіщень notiflix\n\nconst form = document.querySelector('.form'); // змінна form ініціаліується формою з класом form\n\nfunction createPromise(position, delay) {\n  //декларація функції createPromise, яка бере два аргументи position, delay\n  return new Promise((resolve, reject) => {\n    // функція повертає проміс, який виконується в залежності від рандомного числа\n    const shouldResolve = Math.random() > 0.3; // змінна shouldResolve, яка може бути або тру, або фолс, в залежності від того, чи рандомне число буде менше,або більше за 0.3\n    setTimeout(() => {\n      if (shouldResolve) {\n        // перевірка shouldResolve, в залежності від змінної повертає різні результати промісів\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction outputPromises(firstDelay, delayStep, amount) {\n  //декларація функції createPromise, яка бере два аргументи firstDelay, delayStep,amount\n  for (let i = 1; i <= amount; i += 1) {\n    // фором проходимося по кількості промісів\n    const delay = firstDelay + (i - 1) * delayStep; // змінна delay ініціалізується вирахуванням затримки\n    createPromise(i, delay) //використовується функція, яка створює проміс і в залежності від результату проміса виконується зен, а при помилці виконується кетч(кетч ловить помилки в промісах)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nform.addEventListener('submit', event => {\n  // відслідковується підтвердження форми(потрібно вибрати значення і натиснути кнопочку) і після цього виконується функція, яка записує основні аргументи, перевіряє чи задовільняють вони поставлену умову, при умпішній перевірці виконує функцію outputPromises(firstDelay, delayStep, amount) , при неуспішній перевірці за допомогою бібліотеки Notiflix виводить помилку\n  event.preventDefault();\n  const firstDelay = Number(form.elements.delay.value);\n  const delayStep = Number(form.elements.step.value);\n  const amount = Number(form.elements.amount.value);\n\n  if (firstDelay < 0 || delayStep < 0 || amount <= 0) {\n    Notiflix.Notify.warning(\n      'Please enter a value not less than 0 for first delay, delay step and greater than 0 for amount'\n    );\n    return;\n  }\n  outputPromises(firstDelay, delayStep, amount);\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","firstDelay","Number","elements","value","delayStep","step","amount","$parcel$interopDefault","Notify","warning","i","then","success","catch","failure","$47d4ff9957288465$var$outputPromises"],"version":3,"file":"03-promises.84dff6e9.js.map"}